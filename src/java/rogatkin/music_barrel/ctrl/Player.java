package rogatkin.music_barrel.ctrl;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.FileSystems;import java.util.Date;import mediautil.gen.MediaFormat;import mediautil.gen.MediaInfo;import photoorganizer.formats.MediaFormatFactory;import photoorganizer.formats.MP3;import rogatkin.music_barrel.model.PlaybackCtrl;import rogatkin.music_barrel.model.mb_media_item;import rogatkin.music_barrel.model.mb_play_list;import rogatkin.music_barrel.model.mb_play_list_map;import com.beegman.webbee.block.Gadget;import rogatkin.music_barrel.model.MBModel;import rogatkin.music_barrel.srv.PlayerService;import org.aldan3.data.DODelegator;import org.aldan3.data.DOService;public class Player extends Gadget<PlaybackCtrl, MBModel> {	public static final String V_PLAY_PATH = "playPath";	protected PlaybackCtrl getGadgetData() {		PlayerService player = getAppModel().getPlayer();		int cmd = getParameterValue("cmd", -1, 0);		if (cmd >= 0) {			log("Command %d", null, cmd);			if (cmd == 0)				player.stop();			else if (cmd == 1)				player.resume();			else if (cmd == 2)				player.pause();		} else {			try {				Path play = getItemPath();				if (play != null) {					log("Playing %s", null, play);					player.play(play);				}			} catch (Exception e) {				log("", e);			}		}		PlaybackCtrl result = new PlaybackCtrl(getAppModel());		result.status = player.getStatus();		return result;	}	public String processaddItemCall() {		Path item = getItemPath();		if (item == null)			return "error";		MBModel am = getAppModel();		MediaFormat mf = MediaFormatFactory.createMediaFormat(item.toFile(), am.getCharEncoding());		if (mf == null || mf.isValid() == false)			return "error";		mb_play_list pl = new mb_play_list(am);		// TODO get playlist name from request		pl.title = "On The Go";		DOService dos = am.getDOService();		try {			dos.getObjectLike(new DODelegator(pl, null, "", "title") {				@Override				protected String normilizeFieldName(String fieldName) {					return fieldName.toUpperCase();				}			});			if (pl.id <= 0) {				pl.created_on = new Date();				dos.addObject(new DODelegator(pl, null, "", "id"), "id");			}			mb_media_item li = new mb_media_item(am);			fillModel(li);			dos.getObjectLike(new DODelegator(li, null, "", "path") {				@Override				protected String normilizeFieldName(String fieldName) {					return fieldName.toUpperCase();				}			});			//log("Object %s for path %s", null, oo, li.path);			if (li.id <= 0) {				fillMediaModel(li, mf.getMediaInfo());				dos.addObject(new DODelegator(li, null, "", "id"), "id");			}			mb_play_list_map plm = new mb_play_list_map(am);			plm.item_id = li.id;			plm.list_id = pl.id;			plm.related_on = new Date();			dos.addObject(new DODelegator(plm));		} catch (Exception e) {			log("error", e);			return "error";		}		return "ok";	}	Path getItemPath() {		Path result = FileSystems.getDefault().getPath(getParameterValue(V_PLAY_PATH, null, 0));		if (Files.isRegularFile(result) && Files.isReadable(result))			return result;		return null;	}		public static void fillMediaModel(mb_media_item mi, MediaInfo info) {		mi.title = (String)info.getAttribute(MediaInfo.TITLE);		mi.performer = (String)info.getAttribute(MediaInfo.ARTIST);		mi.track = (int)info.getAttribute(MediaInfo.TRACK);		mi.year = (int)info.getAttribute(MediaInfo.YEAR);		mi.genre = MP3.findGenre(info);	}}